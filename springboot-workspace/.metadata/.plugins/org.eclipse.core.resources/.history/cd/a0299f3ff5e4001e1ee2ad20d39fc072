package com.company.shop.security.config;

import javax.security.sasl.AuthorizeCallback;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.EnableAspectJAutoProxy;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

import com.mysql.cj.Session;

@Configuration // 해당 클래스를 환경설정(configuration)으로 등록
@EnableWebSecurity
public class SecurityConfig {
	
   @Bean
   public BCryptPasswordEncoder encodePwd() {
      return new BCryptPasswordEncoder();
   }
   
   @Bean
   public SecurityFilterChain filterChan(HttpSecurity http) throws Exception {
	   
	   //csrf() : Cross Site Request Forgery로 사이트간 위조 요청으로 정상적인 사용자가 의도치 않은
	   //위조 요청을 보내는 것을 의미한다.
//	   http.csrf((csrf) -> csrf.disable());
	   http.csrf(AbstractHttpConfigurer::disable);
	   
	   //JWT을 사용하기 때문에 session기능을 끈다.
	   http.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
	   //요청에 의한 인가(권한) 검사 시작
	   http.authorizeHttpRequests(authorize -> authorize 
			   						.requestMatchers("/","/images/**","/member/signup","/board/list/**").permitAll() // 로그인 없이 접근 허용한다
			   						.anyRequest().permitAll());// 그외 모든 요청에 대해서 인증(로그인)이 되어야 한다.
	   
	   return http.build();
   }
   
}//end class
